; Macro support for the auto-trasher. This is basically just the
; auto_trash macro.

; The work here is surprisingly simple: We're just concatenating "item" and "tiers"
; together with delimiters.
;
; One wrinkle is that we're storing them as ":const" variables that are declared,
; instead of putting them in a Lua array. The reason for this is so that if one
; of the lines is commented out, the declaration will be commented out, leading
; to a compile error when we concat all the declarations.
;
; This is sadly the best we can do - it's not as good as having it work the way
; the user intends (which I believe is impossible currently), but it's *much*
; better than silently trashing the items anyway.

{lua(trash_count = 0)}

#auto_trash(item, tiers) {lua(\
  trash_count = trash_count + 1\
  local item_data = ({tiers} == "") and "" or ({item} .. ":" .. {tiers} .. "|")\
  return (":const string DO_NOT_COMMENT_OUT_auto_trash_" .. trash_count ..\
    ' "' .. item_data .. '"')\
)}

#trash_data {lua(\
  local acc = {}\
  for i = 1, trash_count do\
    acc[i] = "DO_NOT_COMMENT_OUT_auto_trash_" .. i\
  end\
  return table.concat(acc, " . ")\
)}
