:import factory constants
:import recipes

:name {script_name(run_recipes)}

; Debugging function, kept in case of future problems.
#debug_dump_recipes {lua(\
  acc = {};\
  for i = 1, #factory.items do\
    local item = factory.items[i];\
    acc[#acc+1] = string.format("%02d %-18s [", i, item.name);\
    for j = 1, item.tier do\
      if j ~= 1 then acc[#acc+1] = string.format("\n%23s", "") end\
      acc[#acc+1] = "(";\
      local recipe = factory.recipes[i * 10 + j - 1];\
      for k = 1, #recipe do\
        if k ~= 1 then acc[#acc+1] = " " end\
        acc[#acc+1] = recipe[k];\
      end\
      acc[#acc+1] = ")";\
    end\
    acc[#acc+1] = "]\n";\
  end\
  return table.concat(acc);\
)}

;{debug_dump_recipes}

; Now that all the recipes are defined, we have to put them in a valid order.
; We do this with a modified breadth-first-search, optimized around the
; structure of our data.
; Each item (which in this context is a type-tier pair, identified by
; the formula type * 10 + tier) is sequentially checked against a graph
; that is incrementally being formed. If all its recipe-items have already been
; satisfied (or it has none), then it is also satisfied, and (as long
; as it has recipe-items) it's put on a queue to be output. Otherwise, a count
; is kept of how many unsatisfied recipes it has, and an entry is made in each
; blocking recipe pointing back to this item.
; After each item, the queue is processed. The head of the queue is popped
; and gets the next sequential id; this is how the recipes get their order.
; Also, any items blocked on it will have their tallies decremented by one.
; If these go to zero, they are now satisfied and will be added to the queue
; to be output, as well.
{lua(\
  local recipes_list = {};\
  factory.recipes_list = recipes_list;\
  local items = factory.items;\
  local recipes = factory.recipes;\
  local graph = {};\
  local queue = {};\
  for tier = 10, 1, -1 do\
    for item_id = 1, #items do\
      local item = items[item_id];\
      local id = 10 * item_id + tier - 1;\
      local recipe = recipes[id];\
      if not recipe then\
        goto continue;\
      end\
      local entry = graph[id];\
      if not entry then\
        entry = {};\
        entry.blocking = {};\
        graph[id] = entry;\
      end\
      local blockers = 0;\
      if recipe then\
        for i = 1, #recipe, 2 do\
          local other = graph[recipe[i]];\
          if not other then\
            other = {};\
            other.blocking = {};\
            other.blockers = -1;\
            graph[recipe[i]] = other;\
          end\
          if other.blockers ~= 0 then\
            blockers = blockers + 1;\
            other.blocking[#other.blocking + 1] = id;\
          end\
        end\
      end\
      entry.blockers = blockers;\
      \
      if blockers == 0 then\
        queue[#queue + 1] = id;\
      end\
      \
      local q_front = 1;\
      while q_front <= #queue do\
        id = queue[q_front];\
        entry = graph[id];\
        recipes_list[#recipes_list + 1] = id;\
        for i = 1, #entry.blocking do\
          local other = graph[entry.blocking[i]];\
          other.blockers = other.blockers - 1;\
          if other.blockers == 0 then;\
            queue[#queue + 1] = entry.blocking[i];\
          end;\
        end\
        q_front = q_front + 1\
      end\
      queue = {};\
      ::continue::\
    end\
  end\
)}

; Debugging function, kept in case of future problems.
#debug_dump_recipes_list {lua(\
  acc = {};\
  for i = 1, #factory.recipes_list do\
    local id = factory.recipes_list[i];\
    acc[#acc+1] = string.format("%03d:", id);\
    local recipe = factory.recipes[id];\
    for j = 1, #recipe do\
      acc[#acc+1] = string.format(" %3s", recipe[j]);\
    end\
    acc[#acc+1] = "\n";\
  end\
  return table.concat(acc);\
)}

;{debug_dump_recipes_list}

; Constructs the data table that is used to create loop_data. See below
; for the format of this string. One difference is that in loop_data, 
; the previous item/current item index data is at the beginning and end of the
; string. Here, that is actually only stored once, and the sub() read window is
; expanded to overlap consequetive sections to pick up the previous item when
; reading the next.
#get_data(num_terms) {lua(\
  local num_terms = {num_terms};\
  local num_terms_2 = num_terms * 2;\
  local recipe_limit = 0;\
  local acc_main = {};\
  local sub = string.sub;\
  \
  local multipliers = "0123a   b   c   d   e   f   g   h   i   j   k   l   m   n   o   p   q   r   s   t   u   v   w   x   y   z";\
  local mult_max = {};\
  for i = 1, num_terms do\
    mult_max[i] = 0;\
  end\
  acc_main[1] = [["___]];\
  for i = 1, #factory.recipes_list do\
    local id = factory.recipes_list[i];\
    local recipe = factory.recipes[id];\
    local item_id = id // 10;\
    local limit = (#recipe - 1) // num_terms_2;\
    if limit < 0 then limit = 0 end;\
    for j = 1, (limit + 1) * num_terms_2, 2 do\
      acc_main[#acc_main + 1] = (j < #recipe) and recipe[j] + 100 or "   ";\
      local mod = (j // 2) % num_terms + 1;\
      local mult = (j < #recipe) and recipe[j+1] * 4 or 0;\
      if mult > mult_max[mod] then\
        mult_max[mod] = mult;\
      end\
      acc_main[#acc_main + 1] = sub(multipliers, mult + 1, mult + 1);\
      if mod == num_terms then\
        acc_main[#acc_main + 1] = id + 100;\
        recipe_limit = recipe_limit + 1;\
      end\
    end\
  end\
  \
  factory.main_size = 4 * num_terms + 3;\
  acc_main[#acc_main + 1] = '"';\
  factory.multipliers = {};\
  factory.num_terms = num_terms;\
  factory.recipe_limit = recipe_limit;\
  for i = 1, num_terms do\
    if mult_max[i] >= #multipliers then\
      return "Multiplier limit exceeded at " .. i;\
    end\
    factory.multipliers[i] = sub(multipliers, 1, mult_max[i] + 1);\
  end;\
  return table.concat(acc_main);\
)}

#lookup_item {lua(\
  return factory.composite_string(\
    string.format(\
      [[s2i(sub(gsg({data_name}), %d * (i + 1), 2), -1) - 11]],\
      factory.main_size\
    ),\
    nil,\
    true --[[Get craft type info instead of tiers]]\
  );\
)}

; Returns the set of lookup/multiplier terms that will be added in to form
; the base of the value. Most of the data for this is pre-comupted by
; get_data().
#recipe_terms {lua(\
  acc = {};\
  for i = 1, factory.num_terms do\
    if i ~= 1 then\
      acc[#acc + 1] = " + ";\
    end\
    acc[#acc + 1] = string.format(\
      [[max(0., ceil(gdg({queue_str} . sub(loop_data, %d, 3)) *\
        i2d(index("%s", sub(loop_data, %d, 1), 0)) * 0.25))]],\
      factory.entry_size + 4 * i - 1,\
      factory.multipliers[i],\
      factory.entry_size + 4 * i + 2\
    );\
  end\
  return table.concat(acc);\
)}

; This macro is used to test the type of an item, in order to efficiently
; disable the count. Item groups don't have a single real item associated,
; but the count() still has to count something real to avoid a spurious log line.
; Ore and lumps are also classified as groups so that they won't be counted,
; because they're treated specially.
#item_type sub(loop_data, {lua(return factory.entry_size - 1)}, 1)

; These macros are used to test if the item is a dust. Dust gets its queue value
; inflated by one, which has the effect of always ending up with 1 at the end.
; (Although it doesn't prevent temporarily using all dust.)
#recipe_item_trunc sub(loop_data, {lua(\
  return factory.entry_size + factory.main_size;\
)}, 2)
#item_trunc(item) "{lua(return factory.item_names["{item}"].id + 10)}"

#prev_item sub(loop_data, {lua(return factory.entry_size)}, 3)
#recipe_item sub(loop_data, {lua(\
  return factory.entry_size + factory.main_size;\
)}, 3)
; The tier value is just the last digit of recipe_item
#tier_value sub(loop_data, {lua(\
  return factory.entry_size + factory.main_size + 2;\
)}, 1)
#recipe_item_name sub(loop_data, 0, index(loop_data, " ", 0))
#recipe_limit {lua(return factory.recipe_limit)}

:global int factory_target
:global double factory_target_amount

; We use the name of the data variable to pull double-duty as a
; hider for all the craft-queue variables.
; This macro gives a prettier name for the global data string.
#data_name "<size=0><line-height=0>fdata"

:local int i
:local string loop_data

; Uncomment this for debugging. It needs to be before the data-hiding block.
; Also uncomment the line below.
;gss("debug", "")

gss({data_name}, {get_data(4)})
loop:

; Evaluates to an expression that results in an string containing encoded data
; for this recipe. The first entry_size-1 characters are the in-game item name,
; space-padded. Then comes the item type info: 0 is a regular item, 1 is a
; crafted item, and 2 is an item-group. After that is a series of 3-number
; strings, each of which is a craft-queue index.
; The first is the index for the previous item, which is used to determine if
; this is a continuation from a previous line. The next `num_terms`
; terms are index values for queue values to add. After each term is a single
; character which is a multiplier value. Following that is an index for the
; current item, which is used as the index to set, and possibly also as an
; index to read from.
;
; All of this is pulled from reading the appropriate sections of "data", mostly
; as-is. However, there is a secondary lookup for the item name.
loop_data = {lookup_item} . sub(\
  gsg({data_name}),\
  i * {lua(return factory.main_size)},\
  {lua(return factory.main_size + 3)}\
)

; The core expression that does all the work. If this item is the target item,
; then set the queue value to factory_target_amount - this ensures that the
; target is always made, even if it already exists.
; Otherwise, we set it to the sum of all of its recipe terms, minus the existing
; count. This core value is the "queue value", and equals how many must be
; crafted (if positive) or how many extra we have (if negative).
; Since we are hardcoding the number of recipe terms that are handled in each
; loop iteration to a small constant (4), there are additional wrinkles because
; we may need to process the same item multiple times to get all the recipe
; terms in. This means that if we're seeing the same item again, we add the
; previous value of the variable and skip subtracting the count.
; We also skip the count if the item is a group, since those don't have valid
; items to count anyway.
; In this way, we efficiently encode a sum that requires multiple passes.
global.double.set({queue_str} . {recipe_item},\
  if({recipe_item} == i2s(factory_target + 100),\
    factory_target_amount,\
    (\
      if({prev_item} == {recipe_item}, global.double.get({queue_str} . {recipe_item}), 0.) +\
      {recipe_terms} -\
      if(\
        {prev_item} == {recipe_item} || {item_type} == "2",\
        0.,\
        if({recipe_item_trunc} == {item_trunc(dust)}, -1., 0.) + count({recipe_item_name}, index(" 0123456789", {tier_value}, 0))\
      )\
    )\
  )\
)
i = i + 1
; Uncomment this line for debugging. It will show the quantities and ids of all
; items that need to be produced. (The ids will be +100, because of internal reasons.)
; You will also need to enable another line above.
;gss("debug", gsg("debug") . if(gdg({queue_str} . {recipe_item}) > 0., "<br>" . {recipe_item} . " " . gdg({queue_str} . {recipe_item}), ""))
gotoif(loop, i < {recipe_limit})

; We use a global variable when a local variable would do just fine,
; because we want to initialize this particular global variable inside
; the variable-hiding block. It will be used later in the produce scripts.
:global int _tier

_tier = 10
tierloop:

{add_queue(_tier, dust, max(0., ({get_queue(_tier, lump)} - if(_tier == 10, 0., count("lump", min(9, _tier)))) * 4.0))}
{add_queue(_tier, ore, max(0., min(count("ore", _tier), ceil({get_queue(_tier, dust)} / 2.))))}

gotoif(nolumps, _tier == 1 | count("ore", _tier) + count("dust", _tier) == 0.)
{add_queue(-1 + _tier, lump, max(0., {get_queue(_tier, dust)} - {get_queue(_tier, ore)} * 2.))}
nolumps:

_tier -= 1
gotoif(tierloop, _tier > 0)

; If we're missing the resources needed to complete the recipe, set error.
gss(\
  {action},\
  if(\
    {get_queue(1, ore)} * 2. < {get_queue(1, dust)},\
    "<color=#fb3>Missing " . ({get_queue(1, dust)} - {get_queue(1, ore)} * 2.) . " T1 dust<br>and/or higher tier dust/ore!</color>",\
    if(\
      {get_queue(1, rubber)} > 0.,\
      "<color=#fb3>Missing " . {get_queue(1, rubber)} . " rubber!</color>",\
      if(\
        {get_queue(1, void_essence)} > 0.,\
        "<color=#fb3>Missing " . {get_queue(1, void_essence)} . " void essence!</color>",\
        if(\
          {get_queue(1, pumpkin)} > 0.,\
          "<color=#fb3>Missing " . {get_queue(1, pumpkin)} . " pumpkin(s)!</color>",\
          ""\
        )\
      )\
    )\
  )\
)

; This must come before the unset, to avoid ordering mishaps.
gss("fhide2", "</line-height></size>")

; If there's an error, unset target to cancel crafting and clean up future
; iterations. (This leaves some mess behind if the target is changed to something
; else without resetting AI, but it should be good enough.)
{set_raw(factory_target, if(\
  contains(gsg({action}), "<"),\
  0.,\
  {get_raw(factory_target)}\
))}
