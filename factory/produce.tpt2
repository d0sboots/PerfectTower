:import factory constants

:name {script_name(produce)}

:global int _tier

:local double previous_amount

key.{left}()
key.{right}()

isopen("factory")

; If we were launched via key impulse, invoke the UI immediately to start turbo,
; and set action to signal which key was pressed. Otherwise, we're being called
; as a produce script.
execute(if(contains(impulse(), "key."), "{script_name(ui)}", "###badname###"))
gotoif(end, contains(impulse(), "key."))

previous_amount = count("rubber", 1)
produce("rubber", 1, {get_queue(1, rubber_plate)}, "presser")
{subtract_queue(1, rubber_plate, (previous_amount - count("rubber", 1)))}

executesync("{script_name(produce holiday)}")
stop("{script_name(produce holiday)}")

_tier = 1
tierloop:

executesync("{script_name(produce dust)}")
stop("{script_name(produce dust)}")
gotoif(nexttier, _tier > 3 & {get_queue((_tier - 2) / 2, chip)} > 0. | _tier > 4 & {get_queue(_tier - 4, motor)} > 0.)

executesync("{script_name(produce circuits)}")
stop("{script_name(produce circuits)}")
executesync("{script_name(produce plates)}")
stop("{script_name(produce plates)}")

nexttier:
_tier += 1
gotoif(tierloop, _tier < 11)

end:
gss({action}, if(\
 contains(impulse(), "key."),\
 if(\
   contains(impulse(), "key.{left}"),\
   "1",\
   "-1"\
 ),\
 gsg({action})\
))
