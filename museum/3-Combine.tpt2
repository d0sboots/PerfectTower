:import museum_macros
:name {script(Combine)}

; This script is responsible for actually combining gems.
;
; That's true in two senses: It both has the actual call to Combine(), and
; also the logic immediately surrounding it that runs the combines and checks
; to see if the loop is done.

:global int museum_tier
:global int target_tier
:global int museum_pos

:global int turbo.cycles.max
:global int turbo.register

:local double end_time

; Stop our parent. If we're invoking ourselves, this is a wasted cycle.
stop("{script(Calculate)}")

; If we're invoking ourselves, we're a dedicated Combine()er.
; Otherwise, check to see if we've already reached our goal.
; If we have, we can exit early, otherwise fall through to the main logic.
goto(if(\
  contains(impulse(), "{script(Combine)}"), \
  combine, \
  if(tier("inventory", 0) >= target_tier, done, restart_loop)\
))

; Keep restarting the buy and combine scripts whenever the turbo frame ends.
; They rely on the 1-cycle-end-of-script-loop property of turbo to function,
; so we also keep the cycle max up for efficiency.
restart_loop:

; We start 3 copies of combine, because each combine only combines 3 gems.
; (As opposed to when you do it manually: then it does 2 combines, once on
; mousedown and one on mouseup.) 3 is roughly optimal: there are very few
; positions the inventory can be in that don't support 3 combines between buys,
; whereas there are significantly more for 4. And combine is one of the most
; time-expensive operations in the loop, so we don't want to run it pointlessly.
execute("{script(Combine)}")
execute("{script(Combine)}")
execute("{script(Combine)}")

; Start the buyer. By running this after the combiners, we'll always
; end each cycle with a full inventory, which is important for the check below.
execute("{script(Buy)}")

; Extend the max duration. There is a possible race condition where we might
; already be exiting turbo due to being at too many cycles; this is dealt with
; (and discussed more) in Calculate. We can never be in the race condition
; internally, because it does not take nearly 200 cycles to get from the
; "turbo stop" to this line.
;
; Normally we would calculate this based on cycles and cycles.max, but here
; we're just setting it to the maximum that turbo supports. We rely on our own
; fps-based throttling, instead. If we *do* manage to go the whole 50000 cycles
; in less than 200ms, there's an interesting timing effect where we will execute
; TE2.2:stop *exactly* as the next turbo cycle is beginning, leading to a wasted
; turbo cycle and drastically slower execution.
turbo.cycles.max = 50000

; Calculate a time to end the loop at. This is 1/5 of a second in the future,
; so it should reliably be 5 FPS.
end_time = now() + 10000000.0 / 5.0

; The core condition to wait for. This condition needs to be as minimal as
; possible, because it is draining CPU time away from the important combine/buy
; tasks every cycle. (So is the turbo exec machinery, but we can't help that.)
waituntil(tier("inventory", 0) >= target_tier || now() > end_time)

; If we are done, stop the buyers ASAP, to avoid wasting money. The condition
; here relies on the condition above for correctness, but is simpler.
; (Technically there's an edge case if it finishes right at the end, but the
; number of cycles required means that won't happen.)
stop(if(now() > end_time, "", "{script(Buy)}"))

; We restart turbo by changing the variable directly, so that there isn't a
; "turbo start" script taking up cycles. In comparison, we stop turbo with
; executesync(), because we want to block until the end of the frame, and
; the end of the frame will naturally clean up the script.
executesync("TE2.2:stop")
turbo.register += 1

; Do another loop if we're not done yet.
; Abort if the 3rd-to-last power stone is not the tier we expect it to be.
; Because Buy runs after the combines, and won't have been stopped
; in the case where we're not done yet, we can expect the "fill inventory" buy
; to have left the final position with our target tier. Checking this way
; catches both museum rollover and out-of-resources.
;
; The reason for checking the 3rd-to-last slot, and not the last slot, has to
; do with the way combine processing is run: It starts checking for combinable
; stuff from the first slot down. So it's possible for two base-tier stones to
; be left in the last two slots, but there can't be *3* in the last 3, because
; they would be combine-eligible. *Unless* they were just bought. (This isn't
; quite true, because the combines might be occupied with higher-tier stones,
; but if we've exausted resources or had rollover, it will rapidly become true.)
;
; This also interacts in predictable ways with another couple of common issues:
; lacking the "quick combine" skill and not having all the inventory slots.
; If all the slots aren't purchased, this condition will always fail immediately.
; The symptom will be that the combiners seems to "never do anything."
; Conversely, without quick combine no progress will ever be made. As soon
; as a power stone is hit that needs fast leveling, it will get "stuck" there.
; This is a sure sign of lacking quick-combine.
;
; If we are doing a "careful" combine without fill-inventory, it shouldn't take
; more than 1000 cycles, so this condition won't be a problem.
gotoif(restart_loop,\
  tier("inventory", 0) < target_tier && tier("inventory", 27) == museum_tier)

done:
; This is the signal for Main that it should continue.
museum_tier = -2

; Now that we're done, move the finished stone back to "equipped". This also
; moves partial/original stones back, if we cancelled via {start}.
;
; Even though this happens after signalling, we get one extra cycle as a
; "delay slot" before we're stopped by Main.
museum.moveTo("inventory", 0, "loadout", museum_pos)

combine:
; Because of turbo exec, this script will keep running every cycle, until
; the frame pause. At that point, it will exit, and we rely on Combine to
; restart it.

; There's no point in using a variable for the combine limit; halting the
; combines is handled by the end of turbo. Having the limit be a constant
; removes one node from the hottest execution path.
combine(50)

; Space for convenience
