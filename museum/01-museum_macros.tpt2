; Standardized (package) naming across all the scripts
#script(name) D0S.Museum v4.7:{name}
#garbage_requested {script(%%museum-nop%%)}

; Keybindings. You can edit these here, or edit them in the scripts directly
; (but it will be much more error-prone).
#up w
#down s
#start m

; Name of the budget variable, which begins the script-hiding block.
#budget "<size=0>mb**"

; Turn an element string into an index. For our purpose, all the indexes
; need to be multiplied by two, so we look for the index of the first two
; characters of the element.
; The "offset" string allows us to concatenate on a string and thus add a
; constant to the result.
#element_to_index_base(ele, offset) index({offset} . "lielfidanaaiwaeaun", sub({ele}, 0, 2), 0)

; Macro for determining the number of tiers we can boost, given our budget and
; stones of "in_tier".
; We allocate 1% of budget to each stone. Based on the tier of the stones we
; can buy, they cost 2000 * 18^in_tier / 18 each. (We ignore the extra cost
; of universal stones.) This determines how many stones we can buy, and thus,
; the max tier.
; There is an extra division by 9 and a floor. This means that if the level can't
; be raised by at least 2 levels, the quantity in the log will be rounded down to 0,
; and thus the log will result in -infinity. We add back the 2 levels on the outside.
#up_tiers(in_tier) floor(\
  gdg({budget}) / (100.0 * 2000.0 * 9.0 / 18.0) / (18.0 ^ ({in_tier}))\
) // 3.0 + 2.0

; The top tier that can be achieved, given input stones of "in_tier". Capped
; either at +11 levels, or by the budget function of up_tiers.
; If we can't reach +2 levels, up_tiers returns -inf, which will result in -1.
; from this function.
#top_tier(in_tier) max(-1.0, min(50.0, min(11.0, {up_tiers({in_tier})}) + ({in_tier})))
