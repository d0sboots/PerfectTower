:import museum_macros
:name {script(Buy)}

; This script is responsible for buying all stones.
;
; It also contains initialization logic for variables. They must be set in the
; proper order, so that the remain hidden inside our <size=0> block. This also
; reads/writes the budget from worker storage, and increment/decrements it
; if the right keys are pressed.

key.{up}()
key.{down}()

isopen("museum")

:global string museum_status
:global string offer_tiers
:global int museum_tier
:global int target_tier
:global int museum_pos

:global int turbo.register
:global int turbo.cycles

:local string local_elem
:local int local_buy_amount
:local double worker_val

; If we're being called from Combine, we're a buyer.
; Otherwise, if we're being invoked due to key-impulse, but the combiner is
; currently running, abort. We don't want to change the budget in the middle
; of things.
goto(if(\
  contains("{script(Combine)}", impulse()), \
  buy, \
  if(\
    contains("key.{up}|key.{down}", impulse()) &&\
      contains(museum_status, "Combining"),\
    end,\
    init\
  )\
))

init:

; We do *not* direct-start turbo, because we want to detect broken turbo installs.
; In particular, if someone has turbo v2.1 still installed, that would break, but in a way
; that's not easy to programatically detect if we direct-start at this point.
executesync("TE2.2:start")

; This isn't included in this subdirectory, but comes from the factory/ directory.
:import worker_storage_lib
; Use worker_storage_lib to find a worker_slot to use for permanent storage.
#prefix [museum]
:local int worker_slot
{worker_lib_line_1({prefix})}
{worker_lib_line_2}

; Fetch the budget from the chosen worker. The s2d fallback handles the case
; where we're allocating new storage, as well.
worker_val = s2d(sub(worker.name(worker_slot), {len({prefix})}, 99), 1e11)

; Ensure this value is set before we start hiding variables.
; If we're launching on wakeup(), the other turbo variables will get set
; in time, but this one might not.
turbo.cycles = turbo.cycles

; If we're incrementing or decrementing the budget, round it to a fixed
; amount. This allows users to set it to a specific amount by modifying the
; worker if they wish, but we'll always get clean set-points when changing
; via the UI.
; The lower bound is 1e5, since at that point you can't buy any stones
; (according to our budget).
; Also, set budget to -1 if there are no worker slots available. This is our
; signal to Main, so that it can display an appropriate error message.
gds({budget}, if(\
  worker_slot == 200, \
  -1.0, \
  if(\
    contains(impulse(), "key."), \
    (10.0 ^ 0.5) ^ max(10.0, min(560.0, \
      round(worker_val // (10.0 ^ 0.5)) + \
      if(contains(impulse(), "key.{up}"), 1.0, -1.0)\
    )), \
    worker_val\
  )\
))
; Save the budget back. There's always enough room for the full value.
worker.setName(\
  worker_slot - if(worker_slot < 100, 0, 100), \
  "{prefix}" . gdg({budget})\
)

; Set other variables that need to happen before we close the script block.

; If target_tier is -2, we're being invoked because start was pressed: Either
; during the timer countdown, or to abort a running combine. Either way,
; museum_tier needs to be set to 0 to signal no countdown.
;
; Otherwise, we leave it unchanged, which will usually mean the countdown remains
; in effect.
museum_tier = if(target_tier == -2, 0, museum_tier)
museum_pos = -1

; Signal Main to wake up. We only want to override target_tier if it's idle,
; i.e. set to 0 - other situations show that it's in use, and notifying about
; changing budget is the lowest priority.
target_tier = if(target_tier == 0, -3, target_tier)

; Time for more ugly math! When we set preferred tier to "pref", we get stones in
; the range [pref-10, pref], at uniform. We want our best stone to be in that
; range - the one that we can *just* afford to do +11 levels from. Stones smaller
; than that fall off at a rate of 1 tier/level, and stones higher fall off at a
; rate of (18 log 3 - 1), or ~1.63 tiers/level. To maximize the potential of the
; range, we want the top and bottom of the range to have equally high max_tiers,
; so max_tier(pref - 10.5) = max_tier(pref + .5). (The halves make the range of
; size 11, which is needed to properly match the actual integer-sized range.)
;
; Substituting gives pref - 10.5 + 11 = log_3(budget / (2000*100/18) / 18^(pref+.5)) + pref+.5,
; 0 = log_3(budget / K) - (pref + .5) * log_3(18),
; pref + .5 = log_3(budget / K) / log_3(18),
; pref = log_18(budget / K) - .5,
; pref = log_18(budget / (2000*100/18) / 18^.5),
; pref = log_18(budget / (2000*100/18^.5))
;
; The result ends up being intuitive - since the range of stones spans 11 tiers, and
; our uptiers is also +11 tiers, we want to match the preferred tier to the point where
; we can just barely afford to buy the stone.
museum.setPreferredTier(max(1, min(50, d2i((gdg({budget}) / (2000.0 * 100.0 / (18.0 ^ 0.5))) // 18.0))))

; We don't care about waiting for the frame break, so manipulate the value
; directly instead of using "turbo stop".
; This also gives some (useful) extra turbo frames to our caller, Main.
turbo.register -= 1

buy:
; If we're only upgrading 5 or fewer levels, we buy one-at-a-time to avoid
; overbuying. The number of operations is so small that it won't be slow.
; This actually maxes out on speed at +7 levels, because at that point we are
; buying 6 each cycle, which matches the amount the combines use.
local_buy_amount = max(1, (target_tier - museum_tier - 5) * 3)

; If we're a buyer, use the stone in inventory.
; Otherwise, buy nothing until we can exit normally.
local_elem = if(\
  contains("{script(Combine)}", impulse()), \
  element("inventory", 0), \
  ""\
)

; Because of turbo exec, this script will keep running every cycle, until
; the frame pause. At that point, it will exit, and we rely on Combine to
; restart it.
;
; Everything is very carefully engineered to make this expression as minimal
; as possible. It's worth spending extra cycles in set-up in order to remove
; a single node from this expression.
museum.buyTier(local_elem, museum_tier, local_buy_amount)

end:

; Space for convenience
